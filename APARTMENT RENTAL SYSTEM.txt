CREATE TABLE TENANT(
TENANT_ID NUMBER(10) PRIMARY KEY,
FIRST_NAME VARCHAR2(30),
LAST_NAME VARCHAR2(30) NOT NULL,
AGE NUMBER(3),
GENDER VARCHAR2(8),
DOB DATE,
ID_NO NUMBER(13) NOT NULL,
PHONE_NUMBER VARCHAR2(10),
EMAIL_ADDRESS VARCHAR2(50),
PHYSICAL_ADDRESS VARCHAR2(50));

ALTER TABLE TENANT
ADD CONSTRAINT TEN_ID_UK UNIQUE (ID_NO);
 

CREATE TABLE BUILDING(
BUILDING_ID NUMBER(5) PRIMARY KEY,
BUILDING_NAME VARCHAR(20) NOT NULL,
PHYSICAL_ADDRESS VARCHAR2(10),
NUMBER_OF_APARTMENTS NUMBER(9));

ALTER TABLE BUILDING
MODIFY (PHYSICAL_ADDRESS VARCHAR2(50));

CREATE TABLE APARTMENT(
APARTMENT_NO NUMBER(3) PRIMARY KEY,
APARTMENT_TYPE VARCHAR2(10) NOT NULL,
BUILDING_ID NUMBER(11));

ALTER TABLE APARTMENT
ADD CONSTRAINT APART_BUILD_FK FOREIGN KEY (BUILDING_ID)
 REFERENCES BUILDING (BUILDING_ID);

CREATE TABLE PAYMENT(
PAY_NO NUMBER(11) PRIMARY KEY,
PAY_TYPE VARCHAR2(10) NOT NULL,
TENANT_ID NUMBER(11),
APARTMENT_ID NUMBER(3));

ALTER TABLE PAYMENT
ADD CONSTRAINT PAY_TENANT_FK FOREIGN KEY (TENANT_ID)
 REFERENCES TENANT (TENANT_ID);

CREATE TABLE EMPLOYEE(
EMPLOYEE_ID NUMBER(11) PRIMARY KEY,
NAME VARCHAR2(20) NOT NULL,
AGE NUMBER(3),
GENDER VARCHAR2(6),
PHONE_NUMBER VARCHAR2(10),
EMAIL_ADDRESS VARCHAR2(50),
PHYSICAL_ADDRESS VARCHAR2(50));

ALTER TABLE EMPLOYEE
ADD (POSITION VARCHAR2(25));

CREATE TABLE APPLICATION(
APPLICATION_ID NUMBER(4) PRIMARY KEY,
APPLICATION_TYPE VARCHAR2(10) NOT NULL,
CONTRACT VARCHAR2(50),
TENANT_ID NUMBER(11),
APARTMENT_NO NUMBER(11),
EMPLOYEE_ID NUMBER(11));


ALTER TABLE APPLICATION
ADD CONSTRAINT APP_EMP_FK FOREIGN KEY (EMPLOYEE_ID)
 REFERENCES EMPLOYEE (EMPLOYEE_ID);

ALTER TABLE APPLICATION
ADD CONSTRAINT APP_APART_FK FOREIGN KEY (APARTMENT_NO)
 REFERENCES APARTMENT (APARTMENT_NO);


CREATE TABLE SECURITY(
SECURITY_ID NUMBER(5) PRIMARY KEY,
NAME VARCHAR2(20) NOT NULL,
PHONE_NUMBER VARCHAR2(10),
PHYSICAL_ADDRESS VARCHAR2(50));


CREATE TABLE MAINTENANCE(
MAINTENANCE_ID NUMBER(5) PRIMARY KEY,
EMPLOYEE_ID NUMBER(11) NOT NULL,
APARTMENT_NO NUMBER(3) NOT NULL,
BUILDING_ID NUMBER(5) NOT NULL,
MAINTENANCE_DATE DATE);

ALTER TABLE MAINTENANCE
ADD CONSTRAINT MAIN_EMP_FK FOREIGN KEY (EMPLOYEE_ID)
 REFERENCES EMPLOYEE (EMPLOYEE_ID);

ALTER TABLE MAINTENANCE
ADD CONSTRAINT MAIN_APART_FK FOREIGN KEY (APARTMENT_NO)
 REFERENCES APARTMENT (APARTMENT_NO);

ALTER TABLE MAINTENANCE
ADD CONSTRAINT APP_BUILD_FK FOREIGN KEY (BUILDING_ID)
 REFERENCES BUILDING (BUILDING_ID);


CREATE TABLE TENANT_APARTMENT(
TENANT_APP_NO NUMBER(5) PRIMARY KEY,
TENANT_ID NUMBER(11),
APARTMENT_NO NUMBER(5),
BEGIN_DATE DATE,
END_DATE DATE);


ALTER TABLE TENANT_APARTMENT
ADD CONSTRAINT TENT_TENANT_FK FOREIGN KEY (TENANT_ID)
 REFERENCES TENANT (TENANT_ID);

ALTER TABLE TENANT_APARTMENT
ADD (RENT_PER_MONTH VARCHAR2(10));
___________________________________________
INSERTING
TENANT

INSERT INTO TENANT VALUES(117,'LIVHU','MALIEHE',23,'MALE',TO_DATE('17/07/1989','DD/MM/YYYY'),8907179870082,'0848799880','LIVHU@YOUMAIL.COM','10 MAIN GETHE');
INSERT INTO TENANT VALUES(116,'FULU','MUNYAI',22,'MALE',TO_DATE('20/05/1990','DD/MM/YYYY'),9007175544082,'0728998768','FULU@YOUMAIL.COM','4 PENELOPE');
INSERT INTO TENANT VALUES(115,'KENDO','MAMBURU',25,'MALE',TO_DATE('02/02/1987','DD/MM/YYYY'),8702025578082,'0737771836','MAMBURU@YOUMAIL.COM','4 PENELOPE');
INSERT INTO TENANT VALUES(114,'FHUMU','MUTHIVHI',19,'MALE',TO_DATE('29/04/1993','DD/MM/YYYY'),9304294092082,'0728998768','FHUMU@YOUMAIL.COM','13 POTGIETER');
INSERT INTO TENANT VALUES(113,'AMY','COOPER',18,'FEMALE',TO_DATE('27/05/1994','DD/MM/YYYY'),9405275072082,'0767657777','AMY@YOUMAIL.COM','5 CASANDRA');

BUILDING

INSERT INTO BUILDING VALUES(095,'MQUARD TOWERS','56 KRUGER VANDERBIJLPARK',81);

APARTMENT

INSERT INTO APARTMENT VALUES(101,'BACHELOR',095);
INSERT INTO APARTMENT VALUES(102,'DOUBLE',095);
INSERT INTO APARTMENT VALUES(103,'DOUBLE',095);
INSERT INTO APARTMENT VALUES(104,'BACHELOR',095);
INSERT INTO APARTMENT VALUES(105,'BACHELOR',095);

PAYMENT

INSERT INTO PAYMENT VALUES(01,'RENT',117,101);
INSERT INTO PAYMENT VALUES(02,'DEPOSIT',116,102);
INSERT INTO PAYMENT VALUES(03,'DEPOSIT',115,102);
INSERT INTO PAYMENT VALUES(04,'RENT',114,103);
INSERT INTO PAYMENT VALUES(05,'RENT',113,104);

ALTER TABLE PAYMENT
ADD(RENT VARCHAR2(10));

ALTER TABLE PAYMENT
ADD(AMOUNT_PAID VARCHAR2(10));

UPDATE PAYMENT
SET RENT='6500';

UPDATE PAYMENT
SET AMOUNT_PAID='&AMOUNT_PAID'
WHERE TENANT_ID=&TENANT_ID;


EMPLOYEE


INSERT INTO EMPLOYEE VALUES(10,'PETER',25,'MALE','0721973678','PETER@YMAIL.COM','BEDWORTHLAKE','CLECK');
INSERT INTO EMPLOYEE VALUES(20,'JOMBORO',25,'FEMALE','0781973812','JOMBORO@GMAIL.COM','VANDERBIJL','CLEANER');
INSERT INTO EMPLOYEE VALUES(30,'TUMELO',25,'MALE','0839028746','TUMELO@YOHOO.COM','KAGISO','ADMINSTRATOR');
INSERT INTO EMPLOYEE VALUES(40,'JOHN',25,'FEMALE','0717493004','JOHN@YMAIL.COM','LERATONG','CARETAKER');


APPLICATION


INSERT INTO APPLICATION VALUES(001,'BACHELOR','0848799880',117,101,10);
INSERT INTO APPLICATION VALUES(002,'DOUBLE','0728998768',116,102,10);
INSERT INTO APPLICATION VALUES(003,'DOUBLE','0737771836',115,103,10);
INSERT INTO APPLICATION VALUES(004,'BACHELOR','0728998768',114,104,10);
INSERT INTO APPLICATION VALUES(005,'BACHELOR','0767657777',113,105,10);


SECURITY

INSERT INTO SECURITY VALUES(1,'TECHNO-SECURITY','0157389300','SBUKENG');



MAINTENANCE

INSERT INTO MAINTENANCE VALUES(01,10,101,095,TO_DATE('12/10/2012','DD/MM/YYYY'));
INSERT INTO MAINTENANCE VALUES(02,30,104,095,TO_DATE('04/10/2012','DD/MM/YYYY'));
INSERT INTO MAINTENANCE VALUES(03,40,102,095,TO_DATE('28/09/2012','DD/MM/YYYY'));
INSERT INTO MAINTENANCE VALUES(04,20,105,095,TO_DATE('20/10/2012','DD/MM/YYYY'));



TENANT_APARTMENT

INSERT INTO TENANT_APARTMENT VALUES(110,117,101,TO_DATE('12/10/2012','DD/MM/YYYY'),TO_DATE('14/10/2012','DD/MM/YYYY'));
INSERT INTO TENANT_APARTMENT VALUES(120,116,102,TO_DATE('04/10/2012','DD/MM/YYYY'),TO_DATE('07/10/2012','DD/MM/YYYY'));
INSERT INTO TENANT_APARTMENT VALUES(130,114,104,TO_DATE('28/09/2012','DD/MM/YYYY'),TO_DATE('28/09/2012','DD/MM/YYYY'));
INSERT INTO TENANT_APARTMENT VALUES(140,113,105,TO_DATE('20/10/2012','DD/MM/YYYY'),TO_DATE('20/10/2012','DD/MM/YYYY'));

UPDATE TENANT_APARTMENT
SET RENT_PER_MONTH='6500'
WHERE TENANT_APP_NO=110;

UPDATE TENANT_APARTMENT
SET RENT_PER_MONTH='6500'
WHERE TENANT_APP_NO=120;

UPDATE TENANT_APARTMENT
SET RENT_PER_MONTH='6500'
WHERE TENANT_APP_NO=130;

UPDATE TENANT_APARTMENT
SET RENT_PER_MONTH='6500'
WHERE TENANT_APP_NO=140;
___________________________________________________________
DDL COMMANDS;

SELECT * FROM TENANT;
SELECT * FROM APARTMENT;
SELECT * FROM BUILDING;
SELECT * FROM PAYMENT;
SELECT * FROM EMPLOYEE;
SELECT * FROM APPLICATION;
SELECT * FROM SECURITY;
SELECT * FROM MAINTENANCE;
SELECT * FROM TENANT_APARTMENT;
_____________________________________________________________

CONTROL STRUCTURES;

INCREASING APARTMENT RENT;


DECLARE 
V_RENT_INCREASE TENANT_APARTMENT.RENT_PER_MONTH%TYPE :='500';
V_APPNO TENANT_APARTMENT.TENANT_APP_NO%TYPE:=&TEN_APP_NO;
BEGIN
UPDATE TENANT_APARTMENT
SET RENT_PER_MONTH = RENT_PER_MONTH + V_RENT_INCREASE
WHERE TENANT_APP_NO =V_APPNO ;
DBMS_OUTPUT.PUT_LINE('RECORD UPDATED SUCCESSFULLY');
commit;
END;
/

__________________________________________________________
DELETING A TENANT WHO IS MOVING OUT;

DECLARE
  v_TENANTID   TENANT.TENANT_ID%TYPE :=&TENANT_ID; 
BEGIN
  DELETE FROM PAYMENT
  WHERE  TENANT_ID = v_TENANTID;
  DELETE FROM APPLICATION
  WHERE  TENANT_ID = v_TENANTID;
  DELETE FROM TENANT_APARTMENT
  WHERE  TENANT_ID = v_TENANTID;		
  DELETE FROM TENANT
  WHERE  TENANT_ID = v_TENANTID;
DBMS_OUTPUT.PUT_LINE('DELETED SUCCESSFULLY');
END;
/
____________________________________________________________
ADDING A NEW TENANT

DECLARE
 V_TENANTID TENANT.TENANT_ID%TYPE:=&TENANT_ID;
 V_FNAME TENANT.FIRST_NAME%TYPE:='&FIRST_NAME';
 V_LNAME TENANT.LAST_NAME%TYPE:='&LAST_NAME';
 V_AGE TENANT.AGE%TYPE:=&AGE;
 V_GENDER TENANT.GENDER%TYPE:='&GENDER';
 V_ID TENANT.ID_NO%TYPE:=&ID_NO;
 V_PHONE TENANT.PHONE_NUMBER%TYPE:='&PHONE_NUMBER';
 V_EMAIL TENANT.EMAIL_ADDRESS%TYPE:='&EMAIL';
 V_PADDRESS TENANT.PHYSICAL_ADDRESS%TYPE:='&PHYSICAL_ADDRESS';
 V_EXISTS NUMBER;
BEGIN
SELECT COUNT(*) INTO V_EXISTS
FROM TENANT
WHERE TENANT_ID=V_TENANTID;
IF V_EXISTS >0 THEN
 DBMS_OUTPUT.PUT_LINE('TENANT ALREADY EXISTS');
ELSE
 INSERT INTO TENANT(TENANT_ID,FIRST_NAME,LAST_NAME,AGE,GENDER,ID_NO,PHONE_NUMBER,EMAIL_ADDRESS,PHYSICAL_ADDRESS)
 VALUES(V_TENANTID,'V_FNAME','V_LNAME',V_AGE,'V_GENDER',V_ID,'V_PHONE','V_EMAIL','V_PADDRESS');
 DBMS_OUTPUT.PUT_LINE('TENANT ADDED SUCCESSFULLY');
END IF;
END;
/

________________________________________________________________
COMPOSITE DATA TYPES;

DISPLAYING EMPLOYEE INFO; 

DECLARE
V_EMPID EMPLOYEE.EMPLOYEE_ID%TYPE:=&EMPLOYEE_ID;
V_EMPLOYEE_REC EMPLOYEE%ROWTYPE;
BEGIN
SELECT * INTO V_EMPLOYEE_REC FROM EMPLOYEE
WHERE EMPLOYEE_ID = V_EMPID;
DBMS_OUTPUT.PUT_LINE('EMPLOYEE INFO:');
DBMS_OUTPUT.PUT_LINE('------------------------------------------');
DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID: '||V_EMPLOYEE_REC.EMPLOYEE_ID);
DBMS_OUTPUT.PUT_LINE('NAME: '||V_EMPLOYEE_REC.NAME);
DBMS_OUTPUT.PUT_LINE('AGE: '||V_EMPLOYEE_REC.AGE);
DBMS_OUTPUT.PUT_LINE('GENDER: '||V_EMPLOYEE_REC.GENDER);
DBMS_OUTPUT.PUT_LINE('PHONE NUMBER: '||V_EMPLOYEE_REC.PHONE_NUMBER);
DBMS_OUTPUT.PUT_LINE('EMAIL: '||V_EMPLOYEE_REC.EMAIL_ADDRESS);
DBMS_OUTPUT.PUT_LINE('PHYSICAL ADDRESS: '||V_EMPLOYEE_REC.PHYSICAL_ADDRESS);
DBMS_OUTPUT.PUT_LINE('POSION: '||V_EMPLOYEE_REC.POSITION);
END;
/

_________________________________________________________________
EXPLICIT CURSORS;

 
DISPLAYING A TENANT BY THEIR TENANT ID WITH A CURSOR:

DECLARE 
CURSOR C_TENANT_CURSOR IS
SELECT FIRST_NAME,LAST_NAME,AGE,GENDER,DOB,ID_NO,PHONE_NUMBER,EMAIL_ADDRESS,PHYSICAL_ADDRESS FROM TENANT
WHERE TENANT_ID =&TENANT_ID;
V_FIRST_NAME 		TENANT.FIRST_NAME%TYPE;
V_LAST_NAME  		TENANT.LAST_NAME%TYPE;
V_AGE  			TENANT.AGE%TYPE;
V_GENDER  		TENANT.GENDER%TYPE;
V_DOB  			TENANT.DOB%TYPE;
V_ID			TENANT.ID_NO%TYPE;
V_PHONENUMBER  		TENANT.PHONE_NUMBER%TYPE;
V_EMAIL_ADDRESS         TENANT.EMAIL_ADDRESS%TYPE;
V_PHYSICAL_ADDRESS      TENANT.PHYSICAL_ADDRESS%TYPE;
BEGIN
OPEN C_TENANT_CURSOR;
FETCH C_TENANT_CURSOR INTO V_FIRST_NAME,V_LAST_NAME,V_AGE,V_GENDER,V_DOB,V_ID,V_PHONENUMBER,V_EMAIL_ADDRESS,V_PHYSICAL_ADDRESS;
DBMS_OUTPUT.PUT_LINE('STUDENT DETAILS: ' || V_FIRST_NAME || ', '|| V_LAST_NAME||', '|| V_AGE|| ', '|| V_GENDER|| ', '|| V_DOB|| ', ' || V_ID ); 
DBMS_OUTPUT.PUT_LINE(V_PHONENUMBER ||', '||V_EMAIL_ADDRESS||', '|| V_PHYSICAL_ADDRESS);
END;
/
____________________________________________________________________
USER DEFINED EXCEPTIONS;

THAT HANDLES WRONG DATA ENTERED SEARCHING FOR A TENANT;



DECLARE
 V_TENANTID TENANT.TENANT_ID%TYPE:=&TENANT_ID;
 invalid_TENANT EXCEPTION;
BEGIN
SELECT COUNT(TENANT_ID)
 INTO V_TENANTID
FROM TENANT
WHERE TENANT_ID=V_TENANTID;
IF V_TENANTID=0 THEN
RAISE invalid_TENANT;
ELSE
dbms_output.put_line('TENANT found');
END IF;
COMMIT;
EXCEPTION
WHEN invalid_TENANT THEN
  DBMS_OUTPUT.PUT_LINE('NO TENANT IN THIS BIULDING');
END;
/
______________________________________________________________________
PROCEDURES;

CREATE TABLE APARTMENTS AS SELECT * FROM APARTMENT;
CREATE PROCEDURE  ADD_APARTMENTS IS
V_APART_NO APARTMENT.APARTMENT_NO%TYPE;
V_APART_TYPE APARTMENT.APARTMENT_TYPE%TYPE;
V_BUILDING_ID APARTMENT.BUILDING_ID%TYPE;
BEGIN
V_APART_NO :=&APARTMENT_NUMBER;
V_APART_TYPE :='&APARTMENT_TYPE';
V_BUILDING_ID := 095;
INSERT INTO APARTMENT(APARTMENT_NO,APARTMENT_TYPE,BUILDING_ID)
VALUES(V_APART_NO ,V_APART_TYPE,V_BUILDING_ID);
 DBMS_OUTPUT.PUT_LINE(' Inserted '|| SQL%ROWCOUNT ||' row(s) ');
END; 
/

INVOKING THE APARTMENTS PROCEDURE
BEGIN
 ADD_APARTMENTS;
END;
/


CREATE TABLE PAYMENTS AS SELECT * FROM PAYMENT;
CREATE PROCEDURE  ADD_PAYMENTS IS
V_PAY_NO PAYMENT.PAY_NO%TYPE;
V_PAY_TYPE PAYMENT.PAY_TYPE%TYPE;
V_TENANT_ID PAYMENT.TENANT_ID%TYPE;
V_APARTMENT_ID PAYMENT.APARTMENT_ID%TYPE;
BEGIN
V_PAY_NO :=&PAY_NO;
V_PAY_TYPE :='&PAY_TYPE';
V_TENANT_ID := &TENANT_ID;
V_APARTMENT_ID := &APARTMENT_ID;
INSERT INTO PAYMENT(PAY_NO,PAY_TYPE,TENANT_ID,APARTMENT_ID)
VALUES(V_PAY_NO ,V_PAY_TYPE,V_TENANT_ID,V_APARTMENT_ID);
 DBMS_OUTPUT.PUT_LINE(' Inserted '|| SQL%ROWCOUNT ||' row(s) ');
END; 
/

INVOKING THE PAYMENTS PROCEDURE
BEGIN
 ADD_PAYMENTS;
END;
/

______________________________________________________________________
FUNCTIONS;


CREATE FUNCTION CHECK_RENT(P_PAY_NO PAYMENT.PAY_NO%TYPE) RETURN BOOLEAN IS
V_TENANT_ID 	   PAYMENT.TENANT_ID%TYPE;
V_RENT 	   PAYMENT.RENT%TYPE;
V_AMOUNT_DUE	PAYMENT.RENT%TYPE;
BEGIN
 SELECT RENT,TENANT_ID INTO V_RENT,V_TENANT_ID FROM PAYMENT
   WHERE PAY_NO=P_PAY_NO;
 SELECT RENT-AMOUNT_PAID INTO V_AMOUNT_DUE FROM PAYMENT
   WHERE TENANT_ID=V_TENANT_ID;
 IF V_AMOUNT_DUE <= 500 THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;  
 END IF;	
EXCEPTION
  WHEN NO_DATA_FOUND THEN
   RETURN NULL;
END;
/

INVOKING THE FUNCTION

BEGIN
DBMS_OUTPUT.PUT_LINE('CHECKING PAYMENT 1');
 IF (CHECK_RENT(1) IS NULL) THEN
 DBMS_OUTPUT.PUT_LINE('The function returned NULL due to exception');
 ELSIF (CHECK_RENT(1)) THEN  
 DBMS_OUTPUT.PUT_LINE('TENANT MUST PAY RENT IMMEDIATELY!');
 ELSE
 DBMS_OUTPUT.PUT_LINE('TENANT RENT IS UP TO DATE');
 END IF;
DBMS_OUTPUT.PUT_LINE('CHECKING PAYMENT 2');
 IF (CHECK_RENT(2) IS NULL) THEN
 DBMS_OUTPUT.PUT_LINE('The function returned NULL due to exception');
 ELSIF (CHECK_RENT(2)) THEN  
 DBMS_OUTPUT.PUT_LINE('TENANT MUST PAY RENT IMMEDIATELY!');
 ELSE
 DBMS_OUTPUT.PUT_LINE('TENANT RENT IS UP TO DATE');
 END IF;
DBMS_OUTPUT.PUT_LINE('CHECKING PAYMENT 3');
 IF (CHECK_RENT(3) IS NULL) THEN
 DBMS_OUTPUT.PUT_LINE('The function returned NULL due to exception');
 ELSIF (CHECK_RENT(3)) THEN  
 DBMS_OUTPUT.PUT_LINE('TENANT MUST PAY RENT IMMEDIATELY!');
 ELSE
 DBMS_OUTPUT.PUT_LINE('TENANT RENT IS UP TO DATE');
 END IF;
DBMS_OUTPUT.PUT_LINE('CHECKING PAYMENT 4');
 IF (CHECK_RENT(4) IS NULL) THEN
 DBMS_OUTPUT.PUT_LINE('The function returned NULL due to exception');
 ELSIF (CHECK_RENT(4)) THEN  
 DBMS_OUTPUT.PUT_LINE('TENANT MUST PAY RENT IMMEDIATELY!');
 ELSE
 DBMS_OUTPUT.PUT_LINE('TENANT RENT IS UP TO DATE');
 END IF;
DBMS_OUTPUT.PUT_LINE('CHECKING PAYMENT 5');
 IF (CHECK_RENT(6) IS NULL) THEN
 DBMS_OUTPUT.PUT_LINE('The function returned NULL due to exception');
 ELSIF (CHECK_RENT(6)) THEN  
 DBMS_OUTPUT.PUT_LINE('TENANT MUST PAY RENT IMMEDIATELY!');
 ELSE
 DBMS_OUTPUT.PUT_LINE('TENANT RENT IS UP TO DATE');
 END IF;
END;
/
____________________________________________________________________________________

REPORTS;

REGISTERED TENANTS

column TENANT_ID 	Heading 'TENANT_ID'
column FIRST_NAME 	Heading 'FIRST_NAME'
column LAST_NAME 	Heading 'LAST_NAME'
column AGE  		Heading 'AGE'
column GENDER  		Heading 'GENDER'
column DOB		Heading 'DOB'
column ID_NO 		Heading 'ID_NO'
column PHONE_NUMBER 	Heading 'PHONE_NUMBER'
column EMAIL_ADDRESS  	Heading 'EMAIL_ADDRESS'
column PHYSICAL_ADDRESS Heading 'PHYSICAL_ADDRESS'

set linesize 110
set serveroutput on
set echo off

select * from TENANT;

----------------------------------------------------------

APARTMENT REPORT

column APARTMENT_NO 	Heading 'APARTMENT_NO'
column APARTMENT_TYPE 	Heading 'APARTMENT_TYPE'
column  BUILDING_ID     Heading ' BUILDING_ID    '


set linesize 120
set serveroutput on
set echo off

select * from APARTMENT;
	
------------------------------------------------------
PAYMENT REPORT

  
column  PAY_NO 	    	Heading ' PAY_NO'
column PAY_TYPE 	Heading 'PAY_TYPE'
column  TENANT_ID       Heading ' TENANT_ID'
column APARTMENT_ID     Heading 'APARTMENT_ID'
column RENT	    	Heading 'RENTT'
column AMOUNT_PAID 	Heading 'AMOUNT_PAID'

set linesize 150
set serveroutput on
set echo off

select * from PAYMENT;

--------------------------------------------------------------

EMPOLYEE REPORTS

column EMPLOYEE_ID	Heading 'EMPLOYEE_ID'
column NAME 		Heading 'NAME'
column AGE 		Heading 'AGE'
column GENDER  		Heading 'GENDER'
column PHONE_NUMBER  	Heading 'PHONE_NUMBER'
column EMAIL_ADDRESS	Heading 'EMAIL_ADDRESS'
column PHYSICAL_ADDRESS Heading 'PHYSICAL_ADDRESS       '
column POSITION        	Heading 'POSITION       '


set linesize 110
set serveroutput on
set echo off

select * from EMPLOYEE;

---------------------------------------------------------------
APPLICATION REPORTS

column  APPLICATION_ID 	Heading ' APPLICATION_ID '
column APPLICATION_TYPE Heading 'APPLICATION_TYPE'
column CONTRACT 	Heading 'CONTRACT'
column TENANT_ID  	Heading 'TENANT_ID'
column APARTMENT_NO  	Heading 'APARTMENT_NO'
column  EMPLOYEE_ID	Heading ' EMPLOYEE_ID'
       '


set linesize 110
set serveroutput on
set echo off

select * from APPLICATION;

-----------------------------------------------------------
SECURITY REPORT
 
column  SECURITY_ID     Heading ' SECURITY_ID    '
column NAME    		Heading 'NAME   '
column   PHONE_NUMBER   Heading '  PHONE_NUMBER'
column PHYSICAL_ADDRESS Heading 'PHYSICAL_ADDRESS'


set linesize 150
set serveroutput on
set echo off

select * from SECURITY;
----------------------------------------------------------
MAINTENANCE REPORTS

column  MAINTENANCE_ID 	Heading ' MAINTENANCE_ID '
column EMPLOYEE_ID 	Heading 'EMPLOYEE_ID'
column APARTMENT_NO 	Heading 'APARTMENT_NO'
column  BUILDING_ID  	Heading ' BUILDING_ID'
column MAINTENANCE_DATE Heading 'MAINTENANCE_DATE'
column  EMPLOYEE_ID	Heading ' EMPLOYEE_ID'
       '


set linesize 110
set serveroutput on
set echo off

select * from MAINTENANCE;
------------------------------------------------------------------
TENANT_APARTMENT REPORTS

column  TENANT_APP_NO   Heading ' TENANT_APP_NO   '
column TENANT_ID 	Heading 'TENANT_ID'
column APARTMENT_NO 	Heading 'APARTMENT_NO'
column BEGIN_DAT  	Heading 'BEGIN_DAT'
column END_DATE  	Heading 'END_DATE'
column  RENT_PER_MONTH	Heading 'RENT_PER_MONTH'
       


set linesize 110
set serveroutput on
set echo off

select * from TENANT_APARTMENT;
